# Generated by Django 4.2.1 on 2024-07-09 09:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import doctors.models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Doctor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("full_name", models.CharField(max_length=255)),
                ("slug", models.CharField(max_length=255, unique=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="images/avatar"),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid phone number.", regex="^\\d{10}$"
                            )
                        ],
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "alternative_number",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid phone number.", regex="^\\d{10}$"
                            )
                        ],
                    ),
                ),
                (
                    "clinic_no",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Invalid phone number.", regex="^\\d{10}$"
                            )
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Others")],
                        max_length=50,
                    ),
                ),
                ("website", models.URLField(blank=True, max_length=255, null=True)),
                ("bio", models.TextField(blank=True, max_length=255, null=True)),
                ("reg_no", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "reg_council",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("reg_year", models.PositiveIntegerField(blank=True, null=True)),
                ("degree", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "institute_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("completion_year", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "experience_years",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("own_establishment", models.BooleanField(blank=True, null=True)),
                (
                    "identity_proof",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="documents/identity_proofs",
                        validators=[doctors.models.validate_pdf_doc],
                    ),
                ),
                (
                    "medical_reg_proof",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="documents/medical_reg_proofs",
                        validators=[doctors.models.validate_pdf_doc],
                    ),
                ),
                (
                    "establishment_proof",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="documents/establishment_proofs",
                        validators=[doctors.models.validate_pdf_doc],
                    ),
                ),
                ("fee", models.PositiveIntegerField(blank=True, null=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("timings", models.JSONField(blank=True, null=True)),
                (
                    "time_duration",
                    models.CharField(
                        choices=[
                            ("00:10", "10 minutes"),
                            ("00:15", "15 minutes"),
                            ("00:20", "20 minutes"),
                            ("00:30", "30 minutes"),
                            ("00:45", "45 minutes"),
                            ("01:00", "1 hour"),
                        ],
                        default="00:10",
                        max_length=5,
                    ),
                ),
                (
                    "onboarding_steps",
                    models.JSONField(default=doctors.models.get_default_onboarding),
                ),
                ("auto_confirm", models.BooleanField(default=False)),
                (
                    "deleting_reason",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "verbose_name_plural": "Doctors",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="DoctorAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("address_line_1", models.CharField(max_length=255)),
                ("address_line_2", models.CharField(max_length=255)),
                ("landmark", models.CharField(blank=True, max_length=255, null=True)),
                ("city", models.CharField(max_length=255)),
                ("state", models.CharField(max_length=255)),
                ("pincode", models.CharField(max_length=6)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=12, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=12, null=True
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DoctorImages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("image", models.ImageField(upload_to="images/doctors")),
                (
                    "doctor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="doctor_images",
                        to="doctors.doctor",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Doctor Images",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="DoctorEstablishment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_owner", models.BooleanField(default=False)),
                ("timings", models.JSONField(blank=True, null=True)),
                (
                    "doctor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="associated_doctors",
                        to="doctors.doctor",
                    ),
                ),
            ],
        ),
    ]
